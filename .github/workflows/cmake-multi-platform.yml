name: CMake CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        compiler: [gcc-11, gcc-12, gcc-13, clang-18, clang-19, msvc]
        include:
          - os: ubuntu-latest
            compiler: gcc-11
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu-latest
            compiler: gcc-12
            cc: gcc-12
            cxx: g++-12
          - os: ubuntu-latest
            compiler: gcc-13
            cc: gcc-13
            cxx: g++-13
          - os: ubuntu-latest
            compiler: clang-18
            cc: clang-18
            cxx: clang++-18
          - os: ubuntu-latest
            compiler: clang-19
            cc: clang-19
            cxx: clang++-19
          - os: windows-latest
            compiler: msvc
            cc: cl
            cxx: cl
        exclude:
          # Exclude non-Microsoft compilers from Windows
          - os: windows-latest
            compiler: gcc-11
          - os: windows-latest
            compiler: gcc-12
          - os: windows-latest
            compiler: gcc-13
          - os: windows-latest
            compiler: clang-18
          - os: windows-latest
            compiler: clang-19

    #env:
    #  CC: ${{ matrix.cc }}
    #  CXX: ${{ matrix.cxx }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up compilers on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build ${{ matrix.cxx}} tree

      - name: Set compiler environment variables (Linux only)
        if: runner.os == 'Linux'
        run: |
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      - name: Install latest Python 3 (Windows)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # Always gets latest stable

    - name: Configure Conan 
      run: |
        echo $PWD
        tree
        conan install ${{ github.workspace }}/conanfile.py --build missing  -s:h "&:build_type=${{ matrix.build_type }}" -s "compiler.cppstd=20" -of=build -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: cmake --build build

